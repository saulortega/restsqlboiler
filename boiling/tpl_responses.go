package boiling

var tplResponses = `// Code generated by RESTSQLBoiler (https://github.com/saulortega/restsqlboiler). DO NOT EDIT.

package models

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
)

func CheckFindAndResponse(w http.ResponseWriter, Obj interface{}, id int64, errID error, errFind error) {
	err := CheckFindAndResponseOnError(w, id, errID, errFind)
	if err != nil {
		return
	}

	ObjJSON, err := MarshalAndResponseOnError(w, Obj)
	if err != nil {
		return
	}

	ResponseSuccessOnFind(w, ObjJSON)
}

func CheckUpdateAndResponse(w http.ResponseWriter, id int64, errID, errFind, errBuild, errValidate, errUpdate error) {
	err1 := CheckFindAndResponseOnError(w, id, errID, errFind)
	if err1 != nil {
		return
	}

	err2 := CheckBuildValidateAndResponseOnError(w, errBuild, errValidate)
	if err2 != nil {
		return
	}

	if errUpdate != nil {
		log.Println(errUpdate)
		ResponseErrorOnUpdate(w)
		return
	}

	ResponseSuccessOnUpdate(w)
}

func CheckInsertAndResponse(w http.ResponseWriter, id int64, errBuild, errValidate, errInsert error) {
	err := CheckBuildValidateAndResponseOnError(w, errBuild, errValidate)
	if err != nil {
		return
	}

	if errInsert != nil {
		log.Println(errInsert)
		ResponseErrorOnInsert(w)
		return
	}

	ResponseSuccessOnInsert(w, id)
}

func CheckDeleteAndResponse(w http.ResponseWriter, id int64, errID, errFind, errDelete error) {
	err := CheckFindAndResponseOnError(w, id, errID, errFind)
	if err != nil {
		return
	}

	if errDelete != nil {
		log.Println(errDelete)
		ResponseErrorOnDelete(w)
		return
	}

	ResponseSuccessOnDelete(w)
}

func CheckListAndResponse(w http.ResponseWriter, Objs interface{}, errList error) {
	if errList != nil {
		log.Println(errList)
		ResponseErrorOnList(w)
		return
	}

	ObjsJSON, err := MarshalAndResponseOnError(w, Objs)
	if err != nil {
		return
	}

	ResponseSuccessOnFind(w, ObjsJSON)
}

//
//
//

func CheckFindAndResponseOnError(w http.ResponseWriter, id int64, errID error, errFind error) error {
	if id == 0 || errID != nil {
		errNoID := errors.New("ID not received or invalid")
		log.Println(errNoID)
		log.Println(errID)
		ResponseNoID(w)
		return errNoID
	}

	if errFind != nil {
		if errFind == sql.ErrNoRows {
			ResponseNotFound(w)
		} else {
			ResponseErrorOnFind(w)
		}
		log.Println(errFind)
		return errFind
	}

	return nil
}

func CheckBuildValidateAndResponseOnError(w http.ResponseWriter, errBuild error, errValidate error) error {
	if errBuild != nil {
		log.Println(errBuild)
		ResponseBadRequest(w, errBuild)
		return errBuild
	}

	if errValidate != nil {
		log.Println(errValidate)
		ResponseBadRequest(w, errValidate)
		return errValidate
	}

	return nil
}

func MarshalAndResponseOnError(w http.ResponseWriter, Obj interface{}) ([]byte, error) {
	ObjJSON, err := json.Marshal(Obj)
	if err != nil {
		log.Println(err)
		ResponseErrorGeneric(w)
		return ObjJSON, err
	}

	return ObjJSON, nil
}

//
//
//

func ResponseSuccessOnFind(w http.ResponseWriter, ObjJSON []byte) {
	w.WriteHeader(http.StatusOK) //200
	w.Write(ObjJSON)
}

func ResponseSuccessOnUpdate(w http.ResponseWriter) {
	w.WriteHeader(http.StatusOK) //200
}

func ResponseSuccessOnInsert(w http.ResponseWriter, id int64) {
	w.Header().Set("X-Key", fmt.Sprintf("%v", id))
	w.Header().Set("X-Id", fmt.Sprintf("%v", id))
	w.WriteHeader(http.StatusCreated) //201
}

func ResponseSuccessOnDelete(w http.ResponseWriter) {
	w.WriteHeader(http.StatusOK) //200
}

//

func ResponseErrorOnFind(w http.ResponseWriter) {
	w.WriteHeader(http.StatusInternalServerError) //500
	w.Write([]byte("It could not be obtained. Try again later. [2892]"))
}

func ResponseErrorOnUpdate(w http.ResponseWriter) {
	w.WriteHeader(http.StatusInternalServerError) //500
	w.Write([]byte("Could not be updated. Try again later. [4204]"))
}

func ResponseErrorOnInsert(w http.ResponseWriter) {
	w.WriteHeader(http.StatusInternalServerError) //500
	w.Write([]byte("Could not be created. Try again later. [6292]"))
}

func ResponseErrorOnDelete(w http.ResponseWriter) {
	w.WriteHeader(http.StatusInternalServerError) //500
	w.Write([]byte("Could not be deleted. Try again later. [2896]"))
}

func ResponseErrorOnList(w http.ResponseWriter) {
	w.WriteHeader(http.StatusInternalServerError) //500
	w.Write([]byte("Could not be listed. Try again later. [5212]"))
}

//

func ResponseErrorGeneric(w http.ResponseWriter) {
	w.WriteHeader(http.StatusInternalServerError) //500
	w.Write([]byte("An error occurred. Try again later. [9125]"))
}

func ResponseBadRequest(w http.ResponseWriter, r error) {
	w.Header().Set("X-Error", r.Error())
	w.WriteHeader(http.StatusBadRequest) //400
	w.Write([]byte(r.Error()))
}

func ResponseNoID(w http.ResponseWriter) {
	w.WriteHeader(http.StatusBadRequest) //400
	w.Write([]byte("ID not received or invalid"))
}

func ResponseNotFound(w http.ResponseWriter) {
	w.WriteHeader(http.StatusNotFound) //404
	w.Write([]byte("Not found"))
}
`
