package boiling

var tplMain = `// Code generated by RESTSQLBoiler (https://github.com/saulortega/restsqlboiler). DO NOT EDIT.

package models

import (
	"github.com/volatiletech/sqlboiler/boil"
	"log"
	"net/http"
	{{- range .Imports}}
	{{.}}
	{{- end}}
)

var OmitFieldsOnBuilding{{.SingularName}} = []string{}

var Validate{{.SingularName}} = func(*{{.SingularName}}) error {
	return nil
}

var Validate{{.SingularName}}OnUpdate = func(*{{.SingularName}}) error {
	return nil
}

var Validate{{.SingularName}}OnInsert = func(*{{.SingularName}}) error {
	return nil
}

var Build{{.SingularName}} = func(*{{.SingularName}}, *http.Request) error {
	return nil
}

var AfterUpdate{{.SingularName}} = func(boil.Executor, *{{.SingularName}}, *http.Request) error {
	return nil
}

var AfterInsert{{.SingularName}} = func(boil.Executor, *{{.SingularName}}, *http.Request) error {
	return nil
}

var Rebuild{{.SingularName}}OnFind = func(exec boil.Executor, Obj *{{.SingularName}}) (interface{}, error) {
	return interface{}(Obj), nil
}

func FindAndResponse{{.SingularName}}(exec boil.Executor, w http.ResponseWriter, r *http.Request) {
	var errID, errFind error
	var obj = new({{.SingularName}})
	var Obj interface{}
	var id int64

	id, errID = IDFromURL(r)
	if errID == nil && id > 0 {
		obj, errFind = Find{{.SingularName}}(exec, id)
		if errFind == nil {
			Obj, errFind = Rebuild{{.SingularName}}OnFind(exec, obj)
		}
	}

	CheckFindAndResponse(w, Obj, id, errID, errFind)
}

func UpdateAndResponse{{.SingularName}}(exec boil.Executor, w http.ResponseWriter, r *http.Request) {
	var errID, errFind, errBuild, errValidate, errUpdate error
	var Obj = new({{.SingularName}})
	var id int64

	id, errID = IDFromURL(r)
	if errID == nil && id > 0 {
		Obj, errFind = Find{{.SingularName}}(exec, id)
		if errFind == nil {
			ObjIni := *Obj //Una copia
			errBuild = Obj.BuildFromForm(r)
			if errBuild == nil {
				errValidate = Validate{{.SingularName}}(Obj)
				if errValidate == nil {
					errValidate = Validate{{.SingularName}}OnUpdate(Obj)
					if errValidate == nil {
						errUpdate = Obj.Update(exec)
						if errUpdate == nil {
							errUpdate = AfterUpdate{{.SingularName}}(exec, Obj, r)
							if errUpdate != nil {
								errUpd := ObjIni.Update(exec)
								if errUpd != nil {
									log.Println(errUpd)
								}
							}
						}
					}
				}
			}
		}
	}

	CheckUpdateAndResponse(w, id, errID, errFind, errBuild, errValidate, errUpdate)
}

func InsertAndResponse{{.SingularName}}(exec boil.Executor, w http.ResponseWriter, r *http.Request) {
	var errBuild, errValidate, errInsert error
	var Obj = new({{.SingularName}})

	errBuild = Obj.BuildFromForm(r)
	if errBuild == nil {
		errValidate = Validate{{.SingularName}}(Obj)
		if errValidate == nil {
			errValidate = Validate{{.SingularName}}OnInsert(Obj)
			if errValidate == nil {
				errInsert = Obj.Insert(exec)
				if errInsert == nil {
					errInsert = AfterInsert{{.SingularName}}(exec, Obj, r)
					if errInsert != nil {
						errDel := Obj.Delete(exec)
						if errDel != nil {
							log.Println(errDel)
						}
					}
				}
			}
		}
	}

	CheckInsertAndResponse(w, Obj.ID, errBuild, errValidate, errInsert)
}

func DeleteAndResponse{{.SingularName}}(exec boil.Executor, w http.ResponseWriter, r *http.Request) {
	{{if .HasDeletedAt -}}
	SoftDeleteAndResponse{{.SingularName}}(exec, w, r)
	{{- else -}}
	HardDeleteAndResponse{{.SingularName}}(exec, w, r)
	{{- end}}
}

{{if .HasDeletedAt -}}
func SoftDeleteAndResponse{{.SingularName}}(exec boil.Executor, w http.ResponseWriter, r *http.Request) {
	var errID, errFind, errDelete error
	var Obj = new({{.SingularName}})
	var id int64

	id, errID = IDFromURL(r)
	if errID == nil && id > 0 {
		Obj, errFind = Find{{.SingularName}}(exec, id)
		if errFind == nil {
			Obj.DeletedAt = null.NewTime(time.Now(), true)
			errDelete = Obj.Update(exec, "deleted_at")
		}
	}

	CheckDeleteAndResponse(w, id, errID, errFind, errDelete)
}
{{- end}}

func HardDeleteAndResponse{{.SingularName}}(exec boil.Executor, w http.ResponseWriter, r *http.Request) {
	var errID, errFind, errDelete error
	var Obj = new({{.SingularName}})
	var id int64

	id, errID = IDFromURL(r)
	if errID == nil && id > 0 {
		Obj, errFind = Find{{.SingularName}}(exec, id)
		if errFind == nil {
			errDelete = Obj.Delete(exec)
		}
	}

	CheckDeleteAndResponse(w, id, errID, errFind, errDelete)
}

func (o *{{.SingularName}}) BuildFromForm(r *http.Request) error {
	var err error

	{{range .Fields -}}
	{{if eq .Name "ID" "CreatedAt" "UpdatedAt" "DeletedAt" -}}
	{{else if eq .Type "string" -}}
	if !in("{{.JSON}}", OmitFieldsOnBuilding{{$.SingularName}}){
		o.{{.Name}} = r.FormValue("{{.JSON}}")
	}
	{{else if eq .Type "bool" -}}
	if !in("{{.JSON}}", OmitFieldsOnBuilding{{$.SingularName}}){
		o.{{.Name}}, err = parseBoolFromForm(r, "{{.JSON}}", !in("{{.JSON}}", {{$.LowerName}}ColumnsWithDefault))
		if err != nil {
			return err
		}
	}
	{{else if eq .Type "int" -}}
	if !in("{{.JSON}}", OmitFieldsOnBuilding{{$.SingularName}}){
		o.{{.Name}}, err = parseIntFromForm(r, "{{.JSON}}", !in("{{.JSON}}", {{$.LowerName}}ColumnsWithDefault))
		if err != nil {
			return err
		}
	}
	{{else if eq .Type "int64" -}}
	if !in("{{.JSON}}", OmitFieldsOnBuilding{{$.SingularName}}){
		o.{{.Name}}, err = parseInt64FromForm(r, "{{.JSON}}", !in("{{.JSON}}", {{$.LowerName}}ColumnsWithDefault))
		if err != nil {
			return err
		}
	}
	{{else if eq .Type "float64" -}}
	if !in("{{.JSON}}", OmitFieldsOnBuilding{{$.SingularName}}){
		o.{{.Name}}, err = parseFloat64FromForm(r, "{{.JSON}}", !in("{{.JSON}}", {{$.LowerName}}ColumnsWithDefault))
		if err != nil {
			return err
		}
	}
	{{else if eq .Type "time.Time" -}}
	if !in("{{.JSON}}", OmitFieldsOnBuilding{{$.SingularName}}){
		o.{{.Name}}, err = parseTimeFromForm(r, "{{.JSON}}", !in("{{.JSON}}", {{$.LowerName}}ColumnsWithDefault))
		if err != nil {
			return err
		}
	}
	{{else if eq .Type "null.String" -}}
	if !in("{{.JSON}}", OmitFieldsOnBuilding{{$.SingularName}}){
		o.{{.Name}} = parseNullStringFromForm(r, "{{.JSON}}")
	}
	{{else if eq .Type "null.Bool" -}}
	if !in("{{.JSON}}", OmitFieldsOnBuilding{{$.SingularName}}){
		o.{{.Name}}, err = parseNullBoolFromForm(r, "{{.JSON}}")
		if err != nil {
			return err
		}
	}
	{{else if eq .Type "null.Int" -}}
	if !in("{{.JSON}}", OmitFieldsOnBuilding{{$.SingularName}}){
		o.{{.Name}}, err = parseNullIntFromForm(r, "{{.JSON}}")
		if err != nil {
			return err
		}
	}
	{{else if eq .Type "null.Int64" -}}
	if !in("{{.JSON}}", OmitFieldsOnBuilding{{$.SingularName}}){
		o.{{.Name}}, err = parseNullInt64FromForm(r, "{{.JSON}}")
		if err != nil {
			return err
		}
	}
	{{else if eq .Type "null.Float64" -}}
	if !in("{{.JSON}}", OmitFieldsOnBuilding{{$.SingularName}}){
		o.{{.Name}}, err = parseNullFloat64FromForm(r, "{{.JSON}}")
		if err != nil {
			return err
		}
	}
	{{else if eq .Type "null.Time" -}}
	if !in("{{.JSON}}", OmitFieldsOnBuilding{{$.SingularName}}){
		o.{{.Name}}, err = parseNullTimeFromForm(r, "{{.JSON}}")
		if err != nil {
			return err
		}
	}
	{{end -}}
	{{- end}}

	return Build{{.SingularName}}(o, r)
}


//
//
//

func ListAndResponse{{.PluralName}}(exec boil.Executor, w http.ResponseWriter, r *http.Request) {
	Objs, errList := {{.PluralName}}(exec).All()
	CheckListAndResponse(w, Objs, errList)
}





//
//
//

/*
func {{.LowerName}}ColumnWithDefault(col string) bool {
	return columnWithDefault(col, {{.LowerName}}ColumnsWithDefault)
}
*/


`
